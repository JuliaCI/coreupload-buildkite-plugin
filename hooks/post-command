#!/usr/bin/env bash

# Just for debugging. We'll get rid of this later.
set -x

set -euo pipefail
shopt -s globstar extglob nullglob
REPO_DIR="$(dirname $( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" &> /dev/null && pwd 2> /dev/null; ) )";

source "${REPO_DIR}/lib/common.sh"

# Only start printing out if we found some core dumps
readarray -t CORE_DUMPS < <(collect_glob_pattern "${CORE_PATTERN}")
if [[ "${#CORE_DUMPS[@]}" > 0 ]]; then
    echo "--- List of core dumps"
    ls -lah "${CORE_DUMPS[@]}"

    # Start a subshell for compressing/collecting corefiles in the background in parallel
    (
    PIDS=()
    for COREFILE in "${CORE_DUMPS[@]}"; do
        (
        compress_bundle "${COREFILE}"
        buildkite-agent artifact upload "$(compressed_bundle_names "${COREFILE}")"
        ) &
        PIDS+=( "$!" )
    done

    # Wait for compression and upload to finish
    wait -f "${PIDS[@]}"
    ) &
    UPLOAD_PID="$!"

    # If we're given debugger commands, print them out here:
    if [[ "${#DBG_COMMANDS[@]}" > 0 ]]; then
        # Spit some preliminary information out into the log for each corefile
        # In case something went truly wrong and the dbeugger doesn't know what to do
        # (or even worse, freezes up) don't cause these commands to fail the entire build.
        for COREFILE in "${CORE_DUMPS[@]}"; do
            for CMD in "${DBG_COMMANDS[@]}"; do
                echo "--- ${COREFILE} -> ${CMD}"
                run_dbg_command "${COREFILE}" "${CMD}" & DBG_PID="$!"

                # Kill the debugger if it has frozen
                (sleep "${DEBUGGER_TIMEOUT}"; kill "${DBG_PID}" 2>/dev/null >/dev/null; echo "DEBUGGER KILLED BY WATCHDOG TIMER") &

                # Wait for one debugging command to finish before starting the next
                wait -f "${DBG_PID}" || true
            done
        done
    fi

    echo "--- Waiting upon compression/bundling finishing"
    # Only report errors so CI isn't marked bad by issues like https://github.com/JuliaCI/julia-buildkite/issues/421
    if wait -f "${UPLOAD_PID}"; then
        echo " -> Bundling/Compression finished successfully!"
    else
        echo " -> Error occurred during bundling/compression!"
    fi
fi
