agents:
  queue: "juliaecosystem"
  sandbox_capable: "true"
  os: "linux"
  arch: "x86_64"

steps:
  - label: ":boom: raw coredumps"
    key: gen-raw-coredumps
    plugins:
      # Test using globs
      - ".buildkite/plugins/coreupload":
          core_pattern: "**/*.core"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true

  - label: ":boom: :unamused: disabled coredumps"
    key: disabled-coredumps
    plugins:
      - ".buildkite/plugins/coreupload":
          disabled: "true"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      bash -c 'kill -11 $$$$' || true

  - label: ":boom: :zipper_mouth_face: zstd coredumps"
    key: gen-zstd-coredumps
    plugins:
      # Test ourselves.  Note that we add ourself via this ugly hack to ensure that our
      # hook ordering is consistent with `sandbox`; if we try to do the "local path" trick,
      # we end up with improperly-ordered hooks.  This unfortunately means that if someone
      # makes a PR where the branch doesn't exist on the origin, it won't work properly.
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          compressor: "zstd"
          # Test some cool GDB commands
          gdb_commands:
            - "thread apply all bt"
            - "info file"

      # Install Julia v1 so we can run in a sandbox and also use julia to generate segfaults
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
              rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.19/tester_linux.x86_64.tar.gz"
              rootfs_treehash: "6d03dc546ae91b6173926aa3567d8e7d41010fc7"
              uid: 1000
              gid: 1000
              workspaces:
                - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Generate two segfaults
      echo "--- segfault 1"
      julia -e 'ccall(Ptr{UInt8}(rand(UInt64)), Cint, ())' || true

      sleep 1
      echo "--- segfault 2"
      julia -e 'ccall(Ptr{UInt8}(rand(UInt64)), Cint, ())' || true

  - wait: ~

  # Ensure that we got two coredumps from the previous runs
  - label: ":mag: Check coredumps"
    commands: |
      # Download all artifacts, ensure they match what we expect
      buildkite-agent artifact download '*.core*' .

      # Move the `foo`-prefixed artifacts into the current directory:
      mv foo/* .

      [[ "$$(ls *.core* | wc -l)" == "3" ]]
      echo "Three corefiles overall: ✔️"

      [[ "$$(ls julia-*.core.zst | wc -l)" == "2" ]]
      echo "Two zstd julia corefiles: ✔️"

      [[ "$$(ls bash-*.core | wc -l)" == "1" ]]
      echo "One raw bash corefile: ✔️"
