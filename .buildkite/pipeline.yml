steps:
  - label: ":linux: :boom: raw coredumps"
    plugins:
      # Test using globs
      - ".buildkite/plugins/coreupload":
          core_pattern: "**/*.core"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :package: bundled, raw coredump"
    plugins:
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          core_pattern: "**/*.core"
          create_bundle: "true"
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.26/tester_linux.x86_64.tar.gz"
          rootfs_treehash: "777ec4aa795558b5dcc659903c6bd0a0b3565ed4"
          uid: 1000
          gid: 1000
          workspaces:
            - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :zipper_mouth_face: :package: bundled, compressed coredump"
    plugins:
      # Test using globs
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          core_pattern: "**/*.core"
          create_bundle: "true"
          compressor: "zstd"
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.26/tester_linux.x86_64.tar.gz"
          rootfs_treehash: "777ec4aa795558b5dcc659903c6bd0a0b3565ed4"
          uid: 1000
          gid: 1000
          workspaces:
            - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :unamused: disabled coredumps"
    plugins:
      - ".buildkite/plugins/coreupload":
          disabled: "true"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :zipper_mouth_face: zstd coredumps (gdb)"
    plugins:
      # Test ourselves.  Note that we add ourself via this ugly hack to ensure that our
      # hook ordering is consistent with `sandbox`; if we try to do the "local path" trick,
      # we end up with improperly-ordered hooks.  This unfortunately means that if someone
      # makes a PR where the branch doesn't exist on the origin, it won't work properly.
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          compressor: "zstd"
          debugger: "gdb"
          # Test some cool GDB commands
          gdb_commands:
            - "thread apply all bt"
            - "info file"

      # Install Julia v1 so we can run in a sandbox and also use julia to generate segfaults
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.26/tester_linux.x86_64.tar.gz"
          rootfs_treehash: "777ec4aa795558b5dcc659903c6bd0a0b3565ed4"
          uid: 1000
          gid: 1000
          workspaces:
            - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Generate two segfaults
      echo "--- sig 11"
      julia -e 'ccall(:raise, Cvoid, (Cint,), 11)' || true

      echo "--- sig 11"
      julia -e 'ccall(:raise, Cvoid, (Cint,), 11)' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :zipper_mouth_face: zstd coredumps (lldb)"
    plugins:
      # Test ourselves.  Note that we add ourself via this ugly hack to ensure that our
      # hook ordering is consistent with `sandbox`; if we try to do the "local path" trick,
      # we end up with improperly-ordered hooks.  This unfortunately means that if someone
      # makes a PR where the branch doesn't exist on the origin, it won't work properly.
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          compressor: "zstd"
          debugger: "lldb"
          lldb_commands:
            - "bt all"

      # Install Julia v1 so we can run in a sandbox and also use julia to generate segfaults
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.26/tester_linux.x86_64.tar.gz"
          rootfs_treehash: "777ec4aa795558b5dcc659903c6bd0a0b3565ed4"
          uid: 1000
          gid: 1000
          workspaces:
            - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Generate only one segfault
      echo "--- sig 11"
      julia -e 'ccall(:raise, Cvoid, (Cint,), 11)' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :boom: :sleeping: debugger freeze"
    plugins:
      - JuliaCI/coreupload#${BUILDKITE_BRANCH}:
          debugger: "lldb"
          debugger_timeout: 5
          # Purposefully cause `lldb` to freeze up
          lldb_commands:
            - "script import time; time.sleep(1000)"
      - JuliaCI/julia:
          version: "1"
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v5.26/tester_linux.x86_64.tar.gz"
          rootfs_treehash: "777ec4aa795558b5dcc659903c6bd0a0b3565ed4"
          uid: 1000
          gid: 1000
          workspaces:
            - "/cache:/cache"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":macos: :boom: macOS coredumps"
    plugins:
      - ".buildkite/plugins/coreupload":
          core_pattern: "**/*.core"
          create_bundle: "true"
          # macOS core dumps are YUUUGE, so make sure you always use a compressor.
          compressor: "zstd"
          lldb_commands:
            - "bt"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      os: "macos"
      arch: "x86_64"

  - label: ":freebsd: :boom: FreeBSD coredumps"
    plugins:
      - ".buildkite/plugins/coreupload":
          core_pattern: "**/*.core"
          compressor: "zstd"
          lldb_commands:
            - "bt"
    commands: |
      # Enable core dumping
      ulimit -c unlimited

      # Create a sub-bash and kill it, then ignore its failure
      mkdir foo && cd foo
      bash -c 'kill -11 $$$$' || true
    agents:
      queue: "juliaecosystem"
      os: "freebsd"
      arch: "x86_64"

  - wait: ~

  - label: ":mag: Check coredumps"
    commands: |
      # Download all artifacts, ensure they match what we expect
      buildkite-agent artifact download '*.core*' .

      # Move the `foo`-prefixed artifacts into the current directory:
      mv foo/* .

      echo "+++ Run coredump checks"

      # Ensure that all files are above 20k (e.g. not empty tar/zstd streams)
      for f in *.core*; do
        echo -n "Check that $${f} is > 20kb: "
        (( "$$(stat -c%s "$${f}")" > 20480 ))
        echo "✔️"
      done

      echo -n "Nine corefiles overall: "
      [[ "$$(ls *.core* | wc -l)" == "9" ]]
      echo "✔️"

      echo -n "Three zstd julia corefiles: "
      [[ "$$(ls julia-*.core.zst | wc -l)" == "3" ]]
      echo "✔️"

      echo -n "Two raw bash corefile: "
      [[ "$$(ls bash-*.core | wc -l)" == "2" ]]
      echo "✔️"
      
      echo -n "One raw bash bundled bash corefile: "
      [[ "$$(ls bash-*.core.tar | wc -l)" == "1" ]]
      echo "✔️"

      # FreeBSD, sigh
      echo -n "One zstd-compressed bash raw corefile: "
      [[ "$$(ls bash*.core.zst | wc -l)" == "1" ]]
      echo "✔️"

      echo -n "Two zstd bash bundled bash corefile: "
      [[ "$$(ls bash-*.core.tar.zst | wc -l)" == "2" ]]
      echo "✔️"
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"
